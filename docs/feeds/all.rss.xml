<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Krystian Safjan's blog</title><link>/</link><description>&lt;hr&gt;Independent Data Science Consultant.&lt;/br&gt;I blog about Machine Learning, Deep Learning and NLP.&lt;hr&gt;</description><lastBuildDate>Sat, 05 Jan 2019 13:01:34 +0100</lastBuildDate><item><title>How to organize Data Science project based on Jupyter notebook</title><link>/articles/posts/how-to-organize-data-science-project-based-on-jupyter-notebook/</link><description>&lt;p&gt;Having several notebook-based projects behind you might result in mess in projects directory. Organize your Data Science project based on Jupyter notebooks in a way that one can navigate through it. Especially that "the one" will be most probably you in few months time. To achieve that: keep your projects directory clean, name the project in a descriptive way and take care of internal structure of the project.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Krystian Safjan</dc:creator><pubDate>Sat, 05 Jan 2019 13:01:34 +0100</pubDate><guid isPermaLink="false">tag:None,2019-01-05:/articles/posts/how-to-organize-data-science-project-based-on-jupyter-notebook/</guid><category>jupyter</category><category>python</category><category>notebook</category></item><item><title>What's cooking</title><link>/articles/posts/whats-cooking/</link><description>&lt;p&gt;Exploratory Data Anlysis of the Kaggle's "What's cooking" competition dataset to get understanding what kind of data we are dealing with and get intuition of existing dependecies.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Krystian Safjan</dc:creator><pubDate>Thu, 05 Apr 2018 20:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2018-04-05:/articles/posts/whats-cooking/</guid><category>python</category><category>jupyter</category><category>kaggle</category><category>NLP</category><category>EDA</category></item><item><title>Blockchain implementation</title><link>/articles/posts/blockchain-implementation/</link><description>&lt;p&gt;Toy project - Python implementation of blockchain in few lines of code.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Krystian Safjan</dc:creator><pubDate>Mon, 26 Mar 2018 20:10:00 +0200</pubDate><guid isPermaLink="false">tag:None,2018-03-26:/articles/posts/blockchain-implementation/</guid><category>blockchain</category><category>cryptocurency</category><category>python</category></item><item><title>Top popular Zsh plugins on Github</title><link>/articles/posts/top-popular-zsh-plugins-on-github/</link><description>&lt;p&gt;There is an exhaustive but curated list of Zsh plugins posted on Github project &lt;a href="https://github.com/unixorn/awesome-zsh-plugins"&gt;Awesome Zsh plugins&lt;/a&gt;. You can find there 800+ links to plugins, themes and Zsh plugin managers/frameworks. Even though it is a collection of awesome stuff the number is a bit high get orientation which plugins gained already good reputation from Zsh users community. In this post I will identify most popular plugins - those which have highest number of stars.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Krystian Safjan</dc:creator><pubDate>Thu, 22 Mar 2018 13:01:34 +0100</pubDate><guid isPermaLink="false">tag:None,2018-03-22:/articles/posts/top-popular-zsh-plugins-on-github/</guid><category>zsh</category><category>scrapping</category><category>python</category></item></channel></rss>