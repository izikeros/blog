<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Krystian Safjan's blog - Linux</title><link href="https://safjan.com/" rel="alternate"></link><link href="https://safjan.com/feeds/linux.atom.xml" rel="self"></link><id>https://safjan.com/</id><updated>2021-02-08T21:28:00+01:00</updated><subtitle>&lt;hr&gt;&lt;p style="font-size:220%"&gt;Krystian Safjan's Blog&lt;/p&gt;&lt;p&gt;Data Scientist | Researcher | Team Leader&lt;/p&gt;&lt;/br&gt;&lt;/br&gt;I'm working at Nokia and writing about &lt;a href="/category/data-science.html"&gt;Data Science and Visualization&lt;/a&gt;, on &lt;a href="/category/data-science.html"&gt;Machine Learning, Deep Learning&lt;/a&gt; and &lt;a href="/tag/nlp/"&gt;NLP&lt;/a&gt;. There are also some &lt;a href="/category/howto.html"&gt;howto&lt;/a&gt; posts on tools and workflows.&lt;/li&gt;&lt;/ul&gt;&lt;hr&gt;</subtitle><entry><title>Data Science Command lineÂ Tools</title><link href="https://safjan.com/data-science-command-line-tools/" rel="alternate"></link><published>2019-08-23T00:00:00+02:00</published><updated>2021-02-08T21:28:00+01:00</updated><author><name>Krystian Safjan</name></author><id>tag:safjan.com,2019-08-23:/data-science-command-line-tools/</id><summary type="html">&lt;p&gt;Description of &lt;span class="caps"&gt;GNU&lt;/span&gt; utils and other less standard tools that helps with processing data from &lt;span class="caps"&gt;CLI&lt;/span&gt; or with shell&amp;nbsp;scripts.&lt;/p&gt;</summary><content type="html">&lt;p&gt;There are plenty of tools designed to ease life of Data Scientist. In this group, the special place has tools that are used from command line. They are special because are available for most operating systems and are designed with Unix philosophy in mind: they do one thing extremely well, they can be chained creating convenient&amp;nbsp;workflows. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Diagram of cli tools for data science" src="/images/cli_tools_1/cli_tools.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a id="textutils-from-gnu-coreutils"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Textutils from &lt;span class="caps"&gt;GNU&lt;/span&gt;&amp;nbsp;Coreutils&lt;/h2&gt;
&lt;p&gt;From my experience, I have benefit most from mastering the &lt;span class="caps"&gt;GNU&lt;/span&gt; Coreutils. This is the collection of: shellutils, fileutils and textutils - and in this post I will be discussing the latter&amp;nbsp;one. &lt;/p&gt;
&lt;p&gt;&lt;em&gt;Table 1. Textutils - text processing tools, part of &lt;span class="caps"&gt;GNU&lt;/span&gt;&amp;nbsp;Coreutils&lt;/em&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;command&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;strong&gt;cat&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;merge, print files to standard output&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;a href="#comm"&gt;&lt;strong&gt;comm&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;compare sorted files line by line; can find differences, unique lines for each compared files&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;strong&gt;csplit&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;divide files into parts using context&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;strong&gt;cut&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;remove sections from each line in file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;strong&gt;expand/unexpand&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;convert tab into spaces / convert spaces to tabs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;strong&gt;fmt&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;simple text formatter&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;strong&gt;fold&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;fold each input line to fit given line length&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;strong&gt;&lt;a href="#head"&gt;head&lt;/a&gt;/&lt;a href="#tail"&gt;tail&lt;/a&gt;/&lt;a href="#shuf"&gt;shuf&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;display starting lines of file / display file ending lines/get random lines from file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;strong&gt;join&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;join lines from two files on common fields&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;strong&gt;nl&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;line numbering&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;strong&gt;paste&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;merge lines&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;a href="#sort"&gt;&lt;strong&gt;sort&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;sort lines of text file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;strong&gt;&lt;a href="split"&gt;split&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;divide file into parts&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;strong&gt;tac&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;merge, print in reverse order lines of files to standard output&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;strong&gt;tr&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;translate or remove characters&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;strong&gt;&lt;a href="#uniq"&gt;uniq&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;remove duplicated lines from file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;strong&gt;&lt;a href="#wc"&gt;wc&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;display number of characters, words and lines of given file&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;I will give a few examples of commands I use most often or ones that are exceptionally&amp;nbsp;useful.&lt;/p&gt;
&lt;p&gt;&lt;a id="comm"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;comm&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;comm&lt;/code&gt; command is very handy when comes to compare lists stored in separate files. For example you have list of samples used for experiment #1 in one file and list of samples used in experiment #2 in another file.
The &lt;code&gt;comm&lt;/code&gt; command takes sorted files as input and calculate unique lines for &lt;span class="caps"&gt;FILE1&lt;/span&gt; and for &lt;span class="caps"&gt;FILE2&lt;/span&gt; and the result is represented respectively as &lt;code&gt;column 1&lt;/code&gt; and &lt;code&gt;column 2&lt;/code&gt;. Having unique lines in column 1 and 2, set of lines that appear in both files is calculated and result is represented by column&amp;nbsp;3. &lt;/p&gt;
&lt;p&gt;Columns description for &lt;code&gt;comm&lt;/code&gt;:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;lines unique to &lt;span class="caps"&gt;FILE1&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;lines unique to &lt;span class="caps"&gt;FILE1&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;lines that appear in both files&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Having three columns calculated we can now suppress lines that appears in given column in order to get lines that fulfill desired&amp;nbsp;condition.&lt;/p&gt;
&lt;p&gt;Meaning of the numbers used as &lt;code&gt;comm&lt;/code&gt; parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-1&lt;/code&gt;     suppress column 1 (lines unique to &lt;span class="caps"&gt;FILE1&lt;/span&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-2&lt;/code&gt;     suppress column 2 (lines unique to &lt;span class="caps"&gt;FILE2&lt;/span&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-3&lt;/code&gt;     suppress column 3 (lines that appear in both&amp;nbsp;files)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See below three typical usages of &lt;code&gt;comm&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# find lines only in file1&lt;/span&gt;
comm -23 file1 file2

&lt;span class="c1"&gt;# find lines only in file2&lt;/span&gt;
comm -13 file1 file2

&lt;span class="c1"&gt;# find lines common to both files&lt;/span&gt;
comm -12 file1 file2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a id="head"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;head&lt;/h3&gt;
&lt;p&gt;By default, &lt;code&gt;head&lt;/code&gt; prints  the first 10 lines of each file provided as argument to standard output.  With more than one file, precede each with a header giving the file name. You can control how many lines is displayed with option &lt;code&gt;-n&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;head -n5 file.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can also print all but last N lines by adding &lt;code&gt;-&lt;/code&gt; sign. For example in order to have all lines but last&amp;nbsp;one:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;head -n -1 file.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a id="shuf"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;shuf&lt;/h3&gt;
&lt;p&gt;To quickly inspect content of dataset in text file you can use &lt;code&gt;head&lt;/code&gt; which shows some filest lines of the file. If you would like to have more representative example of the content of the file, you can take random sample of lines from file with &lt;code&gt;shuf&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;shuf -n &lt;span class="m"&gt;5&lt;/span&gt; file.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a id="sort"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;sort&lt;/h3&gt;
&lt;p&gt;Here are options I often use for sort and unique&amp;nbsp;operation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-b, --ignore-leading-blanks
              ignore leading blanks

-u, --unique
              with -c, check for strict ordering; without -c, output only the first  of  an equal run

-f, --ignore-case
              fold lower case to upper case characters

-i, --ignore-nonprinting
              consider only printable characters
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sort -bufi data.csv
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a id="split"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;split&lt;/h3&gt;
&lt;p&gt;Sometimes there is a need to split dataset to smaller parts. E.g. when processing large files you can be hit by memory limitations or you want to speed up processing using parallel computing. To split file into N parts with equal number of lines,&amp;nbsp;use: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;split -n l/N data.csv
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;split -n l/10 data.csv
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will create serie of files named: &lt;code&gt;xaa, xab, xac,...&lt;/code&gt;. The default pattern of  &lt;code&gt;split&lt;/code&gt; for file naming is PREFIXaa, PREFIXab,&amp;#8230;; default &lt;span class="caps"&gt;PREFIX&lt;/span&gt; is &lt;code&gt;x&lt;/code&gt;. You can provide your own prefix e.g.
&lt;a id="tail"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;tail&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;split l/10 data.csv part_
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and this will result in having files &lt;code&gt;part_aa, part_ab,...&lt;/code&gt;.  Suffixes doesn&amp;#8217;t have to be alphabetical: can be numeric (use switch &lt;code&gt;-d&lt;/code&gt;) or even hex (use switch &lt;code&gt;-x&lt;/code&gt;). What is particularly usefull - prefixes can be used to save resulting files in given location. Let&amp;#8217;s take an example &lt;code&gt;dataset.csv&lt;/code&gt; file located in data directory, we want to split this file into parts and save results in &lt;code&gt;parts&lt;/code&gt; directory as shown&amp;nbsp;below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;data
âââ dataset.csv
âââ parts
    âââ xaa
    âââ xab
    âââ xac
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To achieve this create parts directory and modify the prefix to &lt;code&gt;parts/x&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;split l/3 data.csv parts/x
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Skipping header row can be done with&amp;nbsp;tail&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tail -n +2 file.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This syntax with usage of &lt;code&gt;+&lt;/code&gt; sign might require explanation. Here is excerpt from the man&amp;nbsp;page: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;-n N means output the last N lines, instead of the last 10; or use +N to output lines starting with the&amp;nbsp;Nth.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The usage of &lt;code&gt;+&lt;/code&gt; sign can be considered as inverting the argument and telling tail to print everything but the first x-1 lines. Note that &lt;code&gt;tail -n +1&lt;/code&gt; would print the whole file, &lt;code&gt;tail -n +2&lt;/code&gt; everything but the first line,&amp;nbsp;etc.&lt;/p&gt;
&lt;p&gt;the alternative solution involves &lt;code&gt;sed&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sed 1d file.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a id="uniq"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;uniq&lt;/h3&gt;
&lt;p&gt;used often with &lt;code&gt;sort&lt;/code&gt; in a&amp;nbsp;way:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat file.txt &lt;span class="p"&gt;|&lt;/span&gt; sort &lt;span class="p"&gt;|&lt;/span&gt; uniq
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If there are no special circumstances &lt;code&gt;cat&lt;/code&gt; should be&amp;nbsp;avoided:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sort file.txt &lt;span class="p"&gt;|&lt;/span&gt; uniq
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Moreover, &lt;code&gt;sort&lt;/code&gt; has option &lt;code&gt;-u&lt;/code&gt; which stands for &lt;em&gt;unique&lt;/em&gt;. Therefore, to have unique lines it is sufficient to&amp;nbsp;use:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sort -u file.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a id="wc"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;wc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;count&amp;nbsp;lines&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wc -l data.csv
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;count lines in multiple files at&amp;nbsp;once&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wc -l *.csv
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For special task - counting lines in very large files one can consider using replacement: &lt;a href="https://github.com/crioux/turbo-linecount"&gt;Super-Fast Multi-Threaded Line&amp;nbsp;Counter&lt;/a&gt;&lt;/p&gt;</content><category term="Linux"></category><category term="machine learning"></category><category term="linux"></category></entry><entry><title>Top CLI tools that improve work in console inÂ 2019</title><link href="https://safjan.com/top-cli-tools-that-improve-work-in-console-in-2019/" rel="alternate"></link><published>2019-07-14T00:00:00+02:00</published><updated>2019-07-14T00:00:00+02:00</updated><author><name>Krystian Safjan</name></author><id>tag:safjan.com,2019-07-14:/top-cli-tools-that-improve-work-in-console-in-2019/</id><summary type="html">&lt;p&gt;On Github project &lt;a href="https://github.com/unixorn/awesome-zsh-plugins"&gt;Awesome Zsh plugins&lt;/a&gt; you can find 1700+ links to plugins, themes and Zsh plugin managers/frameworks. The number of tools listed on that page is high and it is difficult to get orientation which plugins gained already good reputation from Zsh users community. This post aims at identifying most popular tools where popularity is measured with the number of stars that Github users added to given plugin or&amp;nbsp;tool.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here is a list of command line tools and Zsh plugins improving experience when working in text mode. List was created using resources from &lt;a href="https://github.com/unixorn/awesome-zsh-plugins"&gt;Awesome Zsh plugins&lt;/a&gt;. The Github collection is called &amp;#8220;Zsh plugins&amp;#8221; but in fact it is not strictly limited to Zsh plugins but contains a lot of &lt;span class="caps"&gt;CLI&lt;/span&gt; tools that are not Zsh plugins. I have made already similar list 1.5 year ago - you can find results here: &lt;a href="http://safjan.com/articles/posts/top-popular-zsh-plugins-on-github"&gt;top zsh plugins&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;On Github project &lt;a href="https://github.com/unixorn/awesome-zsh-plugins"&gt;Awesome Zsh plugins&lt;/a&gt; you can find currently 1700+ links to plugins, themes and Zsh plugin managers/frameworks. The collection grows in size and gets more and more intimidating for the reader. I decided to filter out tools that are most popular. The popularity is measured with the number of stars that Github users added to given&amp;nbsp;plugin.&lt;/p&gt;
&lt;h1&gt;What are Github&amp;nbsp;stars?&lt;/h1&gt;
&lt;p&gt;Stars is the way how users can &amp;#8216;bookmark&amp;#8217; projects - this can serve as indication for others that project successfully grabbed someone&amp;#8217;s attention. The &lt;code&gt;stargazers&lt;/code&gt; statistics are available via &lt;a href="https://developer.github.com/v4/"&gt;GithubAPI&lt;/a&gt;. The metrics is not capturing directly how popular given tool is but I expect, it is a good indication of how well is grabbing attention of Github users. For sake of clarity, I have excluded frameworks, themes, prompts and fonts  that are also listed on &amp;#8220;Awesome Zsh plugins&amp;#8221; website. The most popular choices excluded from the tools list are posted in the end of this&amp;nbsp;article.&lt;/p&gt;
&lt;h1&gt;Top 20 most popular tools as of July&amp;nbsp;2019&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;link&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;th align="right"&gt;stars&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/nvbn/thefuck"&gt;thefuck&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Magnificent app which corrects your previous console command&lt;/td&gt;
&lt;td align="right"&gt;44.7k&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/junegunn/fzf"&gt;fzf&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A command-line fuzzy finder&lt;/td&gt;
&lt;td align="right"&gt;22.7k&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/pyenv/pyenv"&gt;pyenv&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Simple Python version management&lt;/td&gt;
&lt;td align="right"&gt;15.9k&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/BurntSushi/ripgrep"&gt;ripgrep&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ripgrep recursively searches directories for a regex pattern&lt;/td&gt;
&lt;td align="right"&gt;15.3k&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/sharkdp/bat"&gt;bat&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A cat(1) clone with wings&lt;/td&gt;
&lt;td align="right"&gt;14.4k&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/powerline/powerline"&gt;powerline&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Powerline is a statusline plugin for vim, and provides statuslines and prompts for several other applications, including zsh, bash, tmux, IPython, Awesome and Qtile&lt;/td&gt;
&lt;td align="right"&gt;10.5k&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/rupa/z"&gt;z&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;z - jump around&lt;/td&gt;
&lt;td align="right"&gt;10.2k&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/zsh-users/zsh-autosuggestions"&gt;zsh-autosuggestions&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Fish-like autosuggestions for zsh&lt;/td&gt;
&lt;td align="right"&gt;10.0k&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/wting/autojump"&gt;autojump&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A cd command that learns - easily navigate directories from the command line&lt;/td&gt;
&lt;td align="right"&gt;9.8k&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/tmuxinator/tmuxinator"&gt;tmuxinator&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Manage complex tmux sessions easily&lt;/td&gt;
&lt;td align="right"&gt;9.1k&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/bcicen/ctop"&gt;ctop&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Top-like interface for container metrics&lt;/td&gt;
&lt;td align="right"&gt;8.7k&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/zsh-users/zsh-syntax-highlighting"&gt;zsh-syntax-highlighting&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Fish shell like syntax highlighting for Zsh&lt;/td&gt;
&lt;td align="right"&gt;7.5k&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/peco/peco"&gt;peco&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Simplistic interactive filtering tool&lt;/td&gt;
&lt;td align="right"&gt;5.4k&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/asdf-vm/asdf"&gt;asdf&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Extendable version manager with support for Ruby, Node.js, Elixir, Erlang &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; more&lt;/td&gt;
&lt;td align="right"&gt;5.4k&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/StackExchange/blackbox"&gt;blackbox&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Safely store secrets in Git/Mercurial/Subversion&lt;/td&gt;
&lt;td align="right"&gt;4.9k&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/postmanlabs/newman"&gt;newman&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Newman is a command-line collection runner for Postman&lt;/td&gt;
&lt;td align="right"&gt;3.7k&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/zsh-users/zsh-completions"&gt;zsh-completions&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Additional completion definitions for Zsh&lt;/td&gt;
&lt;td align="right"&gt;2.8k&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/mooz/percol"&gt;percol&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Adds flavor of interactive filtering to the traditional pipe concept of &lt;span class="caps"&gt;UNIX&lt;/span&gt; shell&lt;/td&gt;
&lt;td align="right"&gt;2.8k&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/gruntwork-io/terragrunt"&gt;terragrunt&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Terragrunt is a thin wrapper for Terraform that provides extra tools for working with multiple Terraform modules&lt;/td&gt;
&lt;td align="right"&gt;2.7k&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/karan/joe"&gt;joe&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A .gitignore magician in your command line&lt;/td&gt;
&lt;td align="right"&gt;2.7k&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content><category term="Linux"></category><category term="zsh"></category><category term="scrapping"></category><category term="python"></category><category term="linux"></category></entry><entry><title>Top popular Zsh plugins onÂ Github</title><link href="https://safjan.com/top-popular-zsh-plugins-on-github/" rel="alternate"></link><published>2018-03-22T00:00:00+01:00</published><updated>2018-03-22T00:00:00+01:00</updated><author><name>Krystian Safjan</name></author><id>tag:safjan.com,2018-03-22:/top-popular-zsh-plugins-on-github/</id><summary type="html">&lt;p&gt;There is an exhaustive but curated list of Zsh plugins posted on Github project &lt;a href="https://github.com/unixorn/awesome-zsh-plugins"&gt;Awesome Zsh plugins&lt;/a&gt;. You can find there 800+ links to plugins, themes and Zsh plugin managers/frameworks. Even though it is a collection of awesome stuff the number is a bit high get orientation which plugins gained already good reputation from Zsh users community. In this post I will identify most popular plugins - those which have highest number of&amp;nbsp;stars.&lt;/p&gt;</summary><content type="html">&lt;p&gt;On Github project &lt;a href="https://github.com/unixorn/awesome-zsh-plugins"&gt;Awesome Zsh plugins&lt;/a&gt; you can find 800+ links to plugins, themes and Zsh plugin managers/frameworks. Even though it is a collection of awesome stuff the number is a bit high get orientation which plugins gained already good reputation from Zsh users community. This post aims at identifying most popular plugins where popularity is measured with the number of stars that Github users added to given plugin. For clarity, I will focus here only on plugins excluding frameworks and themes that are also listed on &amp;#8220;Awesome Zsh plugins&amp;#8221;&amp;nbsp;website.&lt;/p&gt;
&lt;h1&gt;What are Github&amp;nbsp;stars?&lt;/h1&gt;
&lt;p&gt;Stars is the way how users can &amp;#8216;bookmark&amp;#8217; projects - this can serve as indication for others that project successfully grabbed someone&amp;#8217;s attention. The &lt;code&gt;stargazers&lt;/code&gt; statistics are available via &lt;a href="https://developer.github.com/v4/"&gt;GithubAPI&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Top 20 most popular plugins as of March&amp;nbsp;2018&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;link&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;th&gt;stars&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/wting/autojump"&gt;autojump&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A cd command that learns - easily navigate directories from the command line. Install autojump-zsh for best results.&lt;/td&gt;
&lt;td&gt;6524&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/zsh-users/zsh-syntax-highlighting"&gt;syntax-highlighting&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Add syntax highlighting to your Zsh. Make sure you load this &lt;em&gt;before&lt;/em&gt; zsh-users/zsh-history-substring-search or they will both break.&lt;/td&gt;
&lt;td&gt;4851&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/zsh-users/zsh-autosuggestions"&gt;autosuggestions&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Fish-like fast/unobtrusive autosuggestions for Zsh.&lt;/td&gt;
&lt;td&gt;4836&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/StackExchange/blackbox"&gt;blackbox&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Stack Exchange&amp;#8217;s toolkit for storing keys/credentials securely in a git repository.&lt;/td&gt;
&lt;td&gt;4098&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/bobthecow/git-flow-completion"&gt;git-flow-completion&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Zsh completion support for git-flow.&lt;/td&gt;
&lt;td&gt;2031&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/zsh-users/zsh-completions"&gt;zsh-completions&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A collection of extra completions for Zsh.&lt;/td&gt;
&lt;td&gt;2003&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/fcambus/ansiweather"&gt;ansiweather&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Weather in your terminal, with &lt;span class="caps"&gt;ANSI&lt;/span&gt; colors and Unicode symbols.&lt;/td&gt;
&lt;td&gt;1342&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/rimraf/k"&gt;k&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Directory listings for Zsh with git features.&lt;/td&gt;
&lt;td&gt;898&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/b4b4r07/enhancd"&gt;enhancd&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A simple tool that provides enhanced &lt;code&gt;cd&lt;/code&gt; command.&lt;/td&gt;
&lt;td&gt;826&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/sobolevn/git-secret"&gt;git-secret&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A bash-tool to store your private data inside a git repository.&lt;/td&gt;
&lt;td&gt;823&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/zsh-users/zsh-history-substring-search"&gt;history-substring-search&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Needs to be loaded after zsh-syntax-highlighting, or they&amp;#8217;ll both break. You&amp;#8217;ll also need to bind keys to its functions, details are in the &lt;span class="caps"&gt;README&lt;/span&gt;.md.&lt;/td&gt;
&lt;td&gt;704&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/skx/sysadmin-util"&gt;sysadmin-util&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Steve Kemp&amp;#8217;s collection of tool scripts for sysadmins.&lt;/td&gt;
&lt;td&gt;473&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/larkery/zsh-histdb"&gt;histdb&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Stores your history in an SQLite database.&lt;/td&gt;
&lt;td&gt;426&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/lukechilds/zsh-nvm"&gt;nvm&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Zsh plugin for installing, updating and loading nvm.&lt;/td&gt;
&lt;td&gt;421&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/zsh-users/zaw"&gt;zaw&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Zsh anything.el-like widget.&lt;/td&gt;
&lt;td&gt;402&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/eriwen/gradle-completion"&gt;gradle-completion&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Bash and Zsh completion support for gradle.&lt;/td&gt;
&lt;td&gt;362&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Below you can find short description of 10 most popular&amp;nbsp;plugins&lt;/p&gt;
&lt;h2&gt;1. &lt;a href="https://github.com/wting/autojump"&gt;autojump&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;autojump is a faster way to navigate your filesystem. It works by maintaining a database of the directories you use the most from the command line. Directories must be visited first before they can be jumped to. It can be an alternative for &lt;a href="https://github.com/rupa/z"&gt;z&lt;/a&gt; or &lt;a href="https://github.com/clvv/fasd"&gt;fasd&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;2. &lt;a href="https://github.com/zsh-users/zsh-syntax-highlighting"&gt;syntax-highlighting&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This package provides Fish shell-like syntax highlighting for the Zsh. It enables highlighing of commands whilst they are typed at a Zsh prompt into an interactive terminal. This helps in reviewing commands before running them, particularly in catching syntax errors.
Some&amp;nbsp;examples:&lt;/p&gt;
&lt;p&gt;Before: &lt;img alt="Screenshot #1.1" src="https://raw.githubusercontent.com/zsh-users/zsh-syntax-highlighting/master/images/before1-smaller.png"&gt;
&lt;/br&gt;
After: &lt;img alt="Screenshot #1.2" src="https://raw.githubusercontent.com/zsh-users/zsh-syntax-highlighting/master/images/after1-smaller.png"&gt;&lt;/p&gt;
&lt;p&gt;Before: &lt;img alt="Screenshot #3.1" src="https://raw.githubusercontent.com/zsh-users/zsh-syntax-highlighting/master/images/before3-smaller.png"&gt;
&lt;/br&gt;
After: &lt;img alt="Screenshot #3.2" src="https://raw.githubusercontent.com/zsh-users/zsh-syntax-highlighting/master/images/after3-smaller.png"&gt;&lt;/p&gt;
&lt;h2&gt;3. &lt;a href="https://github.com/zsh-users/zsh-autosuggestions"&gt;autosuggestions&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This package provides Fish-like fast/unobtrusive autosuggestions for Zsh. It suggests commands as you type, based on command history.
Example:
&lt;a href="https://asciinema.org/a/37390" target="_blank"&gt;&lt;img src="https://asciinema.org/a/37390.png" width="400" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;4. &lt;a href="https://github.com/StackExchange/blackbox"&gt;blackbox&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This package allows to safely store secrets in a &lt;span class="caps"&gt;VCS&lt;/span&gt; repo (i.e. Git, Mercurial, Subversion or Perforce). These commands make it easy for you to Gnu Privacy Guard (&lt;span class="caps"&gt;GPG&lt;/span&gt;) encrypt specific files in a repo so they are &amp;#8220;encrypted at rest&amp;#8221; in your repository. However, the scripts make it easy to decrypt them when you need to view or edit them, and decrypt them for use in production. Originally written for Puppet, BlackBox now works with any Git or Mercurial&amp;nbsp;repository.&lt;/p&gt;
&lt;h2&gt;5. &lt;a href="https://github.com/bobthecow/git-flow-completion"&gt;git-flow-completion&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Bash, Zsh and Fish completion support for &lt;a href="http://github.com/nvie/gitflow"&gt;git-flow&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This package provides support for&amp;nbsp;completing:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;git-flow init and&amp;nbsp;version&lt;/li&gt;
&lt;li&gt;feature, hotfix and release&amp;nbsp;branches&lt;/li&gt;
&lt;li&gt;remote feature, hotfix and release branch&amp;nbsp;names&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;6. &lt;a href="https://github.com/zsh-users/zsh-completions"&gt;zsh-completions&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This projects aims at gathering/developing new completion scripts that are not available in Zsh yet.&amp;nbsp;Demo:&lt;/p&gt;
&lt;p&gt;&lt;img alt="zsh-completions-demo" src="https://raw.githubusercontent.com/supercrabtree/k/gh-pages/inside-work-tree.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;7. &lt;a href="https://github.com/fcambus/ansiweather"&gt;ansiweather&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;AnsiWeather is a Shell script for displaying the current weather conditions
in your terminal, with support for &lt;span class="caps"&gt;ANSI&lt;/span&gt; colors and Unicode&amp;nbsp;symbols.&lt;/p&gt;
&lt;p&gt;&lt;img alt="AnsiWeather Screenshot" src="https://camo.githubusercontent.com/3e34f3781bf3109aa757104c8fa39c8e3ee95675/68747470733a2f2f7777772e63616d6275732e6e65742f66696c65732f616e7369776561746865722f616e7369776561746865722e706e67"&gt;&lt;/p&gt;
&lt;p&gt;Weather data comes from the &lt;code&gt;OpenWeatherMap&lt;/code&gt; free weather &lt;span class="caps"&gt;API&lt;/span&gt;.&lt;/p&gt;
&lt;h2&gt;8. &lt;a href="https://github.com/rimraf/k"&gt;k&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;k is a Zsh script / plugin to make directory listings more readable, adding a bit of color and some git status information on files and directories.
&lt;img alt="k" src="https://raw.githubusercontent.com/supercrabtree/k/gh-pages/inside-work-tree.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;9. &lt;a href="https://github.com/b4b4r07/enhancd"&gt;enhancd&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The new &lt;code&gt;cd&lt;/code&gt; command called &amp;#8220;enhancd&amp;#8221; enhanced the flexibility and usability for a user. enhancd will memorize all directories visited by a user and use it for the pathname resolution. If the log of enhancd have more than one directory path with the same name, enhancd will pass the candidate directories list to the filter within the &lt;code&gt;ENHANCD_FILTER&lt;/code&gt; environment variable in order to narrow it down to one&amp;nbsp;directory.&lt;/p&gt;
&lt;p&gt;Thanks to this mechanism, the user can intuitively and easily change the directory you want to&amp;nbsp;go.&lt;/p&gt;
&lt;p&gt;&lt;img alt="enhancd-demo" src="https://raw.githubusercontent.com/b4b4r07/screenshots/master/enhancd/demo.gif"&gt;&lt;/p&gt;
&lt;h2&gt;10. &lt;a href="https://github.com/sobolevn/git-secret"&gt;git-secret&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;git-secret&lt;/code&gt; is a bash tool to store your private data inside a git repo. It encrypts data, using &lt;code&gt;gpg&lt;/code&gt;, the tracked files with the public keys of all the users that you trust. So everyone of them can decrypt these files using only their personal secret key. Usage of private-public make it easier for everyone to manage access rights. There are no passwords that change. When someone is out - just delete their public key, re-encrypt the files, and they wonât be able to decrypt secrets anymore.
&lt;a href="https://asciinema.org/a/41811?autoplay=1"&gt;&lt;img alt="git-secret terminal preview" src="https://asciinema.org/a/41811.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;On the list[0] there is 300+ projects that are falling into scope of this research, you can get complete dataset by downloading this &lt;span class="caps"&gt;CSV&lt;/span&gt; file: &lt;a href="/downloads/180322_results_sorted.csv"&gt;&lt;span class="caps"&gt;CSV&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;</content><category term="Linux"></category><category term="zsh"></category><category term="scrapping"></category><category term="python"></category><category term="linux"></category></entry></feed>