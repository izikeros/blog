<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Krystian Safjan's blog - Howto</title><link href="https://safjan.com/" rel="alternate"></link><link href="https://safjan.com/feeds/howto.atom.xml" rel="self"></link><id>https://safjan.com/</id><updated>2019-07-09T00:00:00+02:00</updated><subtitle>&lt;hr&gt;&lt;p style="font-size:220%"&gt;Krystian Safjan's Blog&lt;/p&gt;&lt;p&gt;Data Scientist | Researcher | Team Leader&lt;/p&gt;&lt;/br&gt;&lt;/br&gt;I'm working at Nokia and writing about &lt;a href="/category/data-science.html"&gt;Data Science and Visualization&lt;/a&gt;, on &lt;a href="/category/data-science.html"&gt;Machine Learning, Deep Learning&lt;/a&gt; and &lt;a href="/tag/nlp/"&gt;NLP&lt;/a&gt;. There are also some &lt;a href="/category/howto.html"&gt;howto&lt;/a&gt; posts on tools and workflows.&lt;/li&gt;&lt;/ul&gt;&lt;hr&gt;</subtitle><subtitle>&lt;hr&gt;&lt;p style="font-size:220%"&gt;Krystian Safjan's Blog&lt;/p&gt;&lt;p&gt;Data Scientist | Researcher | Team Leader&lt;/p&gt;&lt;/br&gt;&lt;/br&gt;I'm working at Nokia and writing about &lt;a href="/category/data-science.html"&gt;Data Science and Visualization&lt;/a&gt;, on &lt;a href="/category/data-science.html"&gt;Machine Learning, Deep Learning&lt;/a&gt; and &lt;a href="/tag/nlp/"&gt;NLP&lt;/a&gt;. There are also some &lt;a href="/category/howto.html"&gt;howto&lt;/a&gt; posts on tools and workflows.&lt;/li&gt;&lt;/ul&gt;&lt;hr&gt;</subtitle><entry><title>Learn Bayesian methods in 4 steps - by reading and by doing</title><link href="https://safjan.com/learn-bayesian-methods-in-4-steps-by-reading-and-by-doing/" rel="alternate"></link><published>2019-07-09T00:00:00+02:00</published><updated>2019-07-09T00:00:00+02:00</updated><author><name>Krystian Safjan</name></author><id>tag:safjan.com,2019-07-09:/learn-bayesian-methods-in-4-steps-by-reading-and-by-doing/</id><summary type="html">&lt;p&gt;This post propose 4-steps path for learning Byesian methods. First step is goint through the book: &amp;#8220;Bayesian methods for hackers&amp;#8221;, second, use complementary books for probability and statistics, third, read How to become a Bayesian in eight easy steps: An annotated reading list&amp;#8221;, and last, go throught the book full of exercises: &amp;#8220;Think&amp;nbsp;Bayes&amp;#8221;.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;When reading this article you probably have some experience with machine learning models. You might have tried RandomForest, XGBoost, etc.. They are easy to use but it is difficult to understand how final predictions where done. This is sometime refereed as predictions out of black box. Of course, there are techniques that might help a bit e.g. extracting feature importance from the trained&amp;nbsp;models. &lt;/p&gt;
&lt;p&gt;Bayesian methods are a great helper for understanding how actually reasoning was done. These methods provides probabilistic models that can describe the process that produced data we want to process. Besides accurate predictions we often need understanding of what is important in the process. Through understanding gain confidence in used models. We need the convenience when moving with machine learning from toy projects to real business applications. Bayesian can offer such understanding and convenience and that is why these methods are gaining&amp;nbsp;attention.&lt;/p&gt;
&lt;p&gt;In this blog post I will present 4 steps for Bayesian methods mastery. The rough estimate is that you will need to dedicate around 100 hours to complete this 4-steps&amp;nbsp;path.&lt;/p&gt;
&lt;h2&gt;1. &amp;#8220;Bayesian methods for hackers&amp;#8221;  - free book in form of Jupyter notebooks with interactive&amp;nbsp;content.&lt;/h2&gt;
&lt;p&gt;&lt;img style="float: lefts;" src="/images/learn_bayes/bmh.jpg" width="25%" height="25%"&gt;&lt;/p&gt;
&lt;p&gt;First chapter of &amp;#8220;Bayesian methods for hackers&amp;#8221; (&lt;span class="caps"&gt;BMH&lt;/span&gt;) will  introduce you to Bayesian way of thinking. Understand reducing uncertainty using observations. You will go through first example that is showing statistical modeling of texting rate. The following chapters explain, new techniques in details. New techniques are immediately applied to solving exemplary&amp;nbsp;problems.&lt;/p&gt;
&lt;p&gt;For myself, when progressing through the book, I felt that I need to refresh my statistical knowledge and started looking for the proper book. The math required to use these methods is already provided in the book. Yet, I needed better understanding of different random variable distributions.  This is something that I already learned years ago on university courses but i needed an&amp;nbsp;refresher.&lt;/p&gt;
&lt;h2&gt;2. Probability and Statistics books that will help you learn/refresh math to build solid&amp;nbsp;foundation.&lt;/h2&gt;
&lt;p&gt;My choice for complementary probability and statistics books was&amp;nbsp;twofold:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For light introduction, on college level: &lt;a href="https://leanpub.com/openintro-statistics"&gt;Open Intro to statistics 4th edition&lt;/a&gt;  by D. Diez, M. Cetinkaya-Rundel, and Ch. Barr. According to my needs, Chapter 4 &amp;#8220;Distributions of random variables&amp;#8221; was pleasant to&amp;nbsp;read.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For deep dive: &lt;a href="http://www.med.mcgill.ca/epidemiology/hanley/bios601/GaussianModel/JaynesProbabilityTheory.pdf"&gt;Probability Theory: The Logic of Science: Principles and Elementary Applications&amp;#8221;&lt;/a&gt; by &lt;span class="caps"&gt;E. T.&lt;/span&gt; Jaynes. This book itself could be a subject of learning for hundreds of hours, but reading separate chapters or sections still should be&amp;nbsp;fine.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;3. &amp;#8220;How to become a Bayesian in eight easy steps: An annotated reading&amp;nbsp;list&amp;#8221;.&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://psyarxiv.com/ph6sw"&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;How to become a Bayesian in eight easy steps: An annotated reading list&amp;#8221;&lt;/a&gt; by Etz, Alexander, et al., is a paper, not target on Computer Scientists. Actually, it  originates from field of psychology but is written in domain-agnostic style, so reader from any discipline can enjoy reading this. The paper has survey style, and use classification of the covered papers in two dimensions: of difficulty (from easy to hard), and focus (from theoretical to practical). See Figure below, borrowed from the&amp;nbsp;paper.&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/learn_bayes/readinglist.png" width="45%" height="45%"&gt;&lt;/p&gt;
&lt;p&gt;The main paper and references are rather light reading and I found it useful in building context for diving into  Bayesian&amp;nbsp;analysis.&lt;/p&gt;
&lt;h2&gt;4. Exercises to develop Bayesian thinking: &amp;#8220;Think Bayes&amp;#8221; by Allen&amp;nbsp;Downey.&lt;/h2&gt;
&lt;p&gt;&lt;img style="float: left;" src="/images/learn_bayes/think_bayes_1.jpg" width="25%" height="25%"&gt;&lt;/p&gt;
&lt;p&gt;Another great book to learn Bayesian thinking. It is divided to smaller units than &lt;span class="caps"&gt;BMH&lt;/span&gt;  what makes it easier to digest for readers that are quickly loosing attention when reading scientific stuff. When compared to &lt;span class="caps"&gt;BMH&lt;/span&gt;, it has much more examples. Crashing large number of cases is to me very good approach for training Bayesian intuition and learning&amp;nbsp;methods.&lt;/p&gt;
&lt;p&gt;Will you give a try to Bayesian methods? If you have proposal of alternative learning path - please share it in the&amp;nbsp;comments.&lt;/p&gt;</content><category term="Howto"></category><category term="machine learning"></category><category term="statistics"></category><category term="probability"></category><category term="howto"></category></entry><entry><title>How to install TensorFlow and Keras on Windows 10</title><link href="https://safjan.com/how-to-install-tensorflow-and-keras-on-windows-10/" rel="alternate"></link><published>2019-01-17T00:00:00+01:00</published><updated>2019-02-08T00:00:00+01:00</updated><author><name>Krystian Safjan</name></author><id>tag:safjan.com,2019-01-17:/how-to-install-tensorflow-and-keras-on-windows-10/</id><summary type="html">&lt;p&gt;Guide on how to install TensorFlow cpu-only version - the case for machines without &lt;span class="caps"&gt;GPU&lt;/span&gt; supporting &lt;span class="caps"&gt;CUDA&lt;/span&gt;. Step-by-step procedure starting from creating conda environment till testing if TensorFlow and Keras&amp;nbsp;Works.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;EDIT&lt;/span&gt; 2021&lt;/strong&gt;: This post is partially depreciated by now since for TensorFlow 2.x &lt;span class="caps"&gt;CPU&lt;/span&gt; and &lt;span class="caps"&gt;GPU&lt;/span&gt; versions are intergated - there is no separate install and Keras is integrated with TensorFlow - no need to install separately unless you have good reasons for separate&amp;nbsp;install.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Quick guide on how to install TensorFlow cpu-only version - the case for machines without &lt;span class="caps"&gt;GPU&lt;/span&gt; supporting &lt;span class="caps"&gt;CUDA&lt;/span&gt;.&lt;/p&gt;
&lt;!-- MarkdownTOC autolink="true" autoanchor="true" --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#creating-conda-environment-for-working-with-tensorflow-and-keras"&gt;Creating Conda environment for working with TensorFlow and&amp;nbsp;Keras&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#installing-tensorflow"&gt;Installing&amp;nbsp;TensorFlow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#installing-keras"&gt;Installing&amp;nbsp;Keras&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /MarkdownTOC --&gt;

&lt;p&gt;&lt;a id="creating-conda-environment-for-working-with-tensorflow-and-keras"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Creating Conda environment for working with TensorFlow and&amp;nbsp;Keras&lt;/h1&gt;
&lt;p&gt;Open &lt;code&gt;anaconda prompt&lt;/code&gt; (hit &lt;code&gt;Win+Q&lt;/code&gt;, type anaconda) and create conda&amp;nbsp;virtualenv:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;conda create -n tf_windows &lt;span class="nv"&gt;python&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;this will create minimal&amp;nbsp;environement&lt;/p&gt;
&lt;p&gt;When the environment is created, activate it. After that the environment’s name will be added before the&amp;nbsp;prompt.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;activate tf_windows
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a id="installing-tensorflow"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Installing&amp;nbsp;TensorFlow&lt;/h1&gt;
&lt;p&gt;Then install TensorFlow for &lt;span class="caps"&gt;CPU&lt;/span&gt;-only&amp;nbsp;machines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;(tf_windows)&amp;gt; pip install tensorflow
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There can be few variants of the &lt;code&gt;tensorflow&lt;/code&gt; package installation. If you need to run &lt;code&gt;pip&lt;/code&gt; behind corporate proxy, add proxy&amp;nbsp;information:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;(tf_windows)&amp;gt; pip --proxy=&amp;quot;proxy_url:port&amp;quot; install tensorflow
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you need &lt;span class="caps"&gt;GPU&lt;/span&gt;-enabled version (and your machine supports&amp;nbsp;it)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;(tf_windows)&amp;gt; pip install tensorflow-gpu
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To test if installation was successful, you might want to do&amp;nbsp;check:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tf_windows&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tensorflow&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;tf&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;constant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello world!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;if everything was installed correctly, you should&amp;nbsp;see:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello world!&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;On my machine I got warning when starting a new&amp;nbsp;session:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;2019-01-17 07:09:01.477724: I tensorflow/core/platform/cpu_feature_guard.cc:141] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Don&amp;#8217;t get scared by that, TensorFlow works, the information displayed means that it isn&amp;#8217;t as fast as it could be.
In order to suppress this you will need to build TensorFlow from sources using appropriate flags (see &lt;a href="https://stackoverflow.com/questions/41293077/how-to-compile-tensorflow-with-sse4-2-and-avx-instructions?rq=1"&gt;StackOverflow answer&lt;/a&gt;) for compilation otherwise you can ignore&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;&lt;a id="installing-keras"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Installing&amp;nbsp;Keras&lt;/h1&gt;
&lt;p&gt;The way that worked for me&amp;nbsp;was:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;(tf_windows)&amp;gt;conda install mingw libpython&lt;/span&gt;
&lt;span class="err"&gt;(tf_windows)&amp;gt;pip install --upgrade keras&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Using the &lt;code&gt;--upgrade&lt;/code&gt; flag ensures that the latest version of Keras will be&amp;nbsp;installed.&lt;/p&gt;
&lt;p&gt;Perform the test if Keras was installed&amp;nbsp;correctly&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;keras&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;backend&lt;/span&gt;
&lt;span class="n"&gt;Using&lt;/span&gt; &lt;span class="n"&gt;TensorFlow&lt;/span&gt; &lt;span class="n"&gt;backend&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;backend&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_BACKEND&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;tensorflow&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="'Howto'"></category><category term="machine learning"></category><category term="tensorflow"></category><category term="howto"></category></entry><entry><title>How to organize Data Science project based on Jupyter notebook</title><link href="https://safjan.com/how-to-organize-data-science-project-based-on-jupyter-notebook/" rel="alternate"></link><published>2019-01-05T00:00:00+01:00</published><updated>2019-01-05T00:00:00+01:00</updated><author><name>Krystian Safjan</name></author><id>tag:safjan.com,2019-01-05:/how-to-organize-data-science-project-based-on-jupyter-notebook/</id><summary type="html">&lt;p&gt;Having several notebook-based projects behind you might result in mess in projects directory. Organize your Data Science project based on Jupyter notebooks in a way that one can navigate through it. Especially that &amp;#8220;the one&amp;#8221; will be most probably you in few months time. To achieve that: keep your projects directory clean, name the project in a descriptive way and take care of internal structure of the&amp;nbsp;project.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this blog post I will share way to organize your Data Science project based on Jupyter notebooks in a way that one can navigate through it. Especially that &amp;#8220;the one&amp;#8221; will be most probably you in few months time. So be nice for yourselves and organize your project in rational structure rather than spontaneous&amp;nbsp;chaos.&lt;/p&gt;
&lt;h1&gt;Problem with finding valuable work you done in the Jupyter notebook in the&amp;nbsp;past&lt;/h1&gt;
&lt;p&gt;I had few problems like that. In my projects I used to find multiple untitled notebooks such as: &lt;code&gt;Untitled1.ipynb&lt;/code&gt;, &lt;code&gt;Untitled2.ipynb&lt;/code&gt;, &lt;code&gt;Untitled3.ipynb&lt;/code&gt; - that requires extra effort to check out what is inside. Similarly with data: shall this be in &lt;code&gt;~/datasets&lt;/code&gt; or &lt;code&gt;~/projects/my_project/datasets&lt;/code&gt;. The need for standardization emerged after creating like dozen of notebook-based projects. Here are lessons learned and solutions worked out for my use&amp;nbsp;cases.&lt;/p&gt;
&lt;h1&gt;Rules I try to&amp;nbsp;follow&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Rule #1: Keep your projects directory&amp;nbsp;clean&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This means not to put notebooks directly in your &lt;code&gt;projects&lt;/code&gt;, &lt;code&gt;src&lt;/code&gt; directory (or as you call it) but rather keep each project in separate directory in order to have uniform structure and, at projects view level - only one item (directory) per project. This also help when using version control on project-level.
Having this primitive in place, you should be able to get back to valuable pieces of code you done in the past and adopt or reuse it whenever needed. Just don&amp;#8217;t mix raw data, processed data, images and notebooks in one top level directory and you are 80%&amp;nbsp;done.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rule #2: Name the project in a descriptive&amp;nbsp;way&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use the names in the way that you will be sure which project it is. In case of my side projects I use different names fir different incarnations of the project - when I start attacking the same problem from different angle and starting basically from the&amp;nbsp;scratch.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rule #3: Take care of internal structure of the project&lt;/strong&gt;
There might be simple project that fits into one notebook and does not require any external files, but if you are doing something more complex e.g. using file with data and preprocessing the data - having well thought structure of the project might pay off. Please note that internal structure of the project depends on the use case. For my practice, I distinguish three use&amp;nbsp;cases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;End-to-end individual work. This is typically case of my side projects - if it is interesting enough it might evolve into one of the subsequent&amp;nbsp;categories.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Collaborative project. This can be work done for the client and deliverable could be further developed corroboratively to finally land as a product feature in&amp;nbsp;production.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Individual work but final notebook shares as result. This can be analysis on demand where notebook report is the deliverable or think of side-project/tutorial that you would like to publish on the&amp;nbsp;blog.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Depending in the use case project directory structure, data directory structure and notebook directory structure might differ but from my experience, for small to medium Data Science projects the structure similar to this should works&amp;nbsp;well:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;my_project_name/
  ├── 1-preprocessing.ipynb
  ├── 2-analysis.ipynb
  ├── data
  │   ├── interim
  │   ├── processed
  │   └── raw
  └── reports
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;Specific aspects for different use&amp;nbsp;cases&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;End-to-end individual&amp;nbsp;work&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Characteristics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;short-time&amp;nbsp;activity&lt;/li&gt;
&lt;li&gt;low&amp;nbsp;complexity&lt;/li&gt;
&lt;li&gt;consist of small number of notebooks (fits into single&amp;nbsp;notebook&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For longer/bigger projects consider using guidelines from Collaborative&amp;nbsp;Project&lt;/p&gt;
&lt;p&gt;If not using version control or not doing small (atomic) commits consider adding changelog cell to track evolution of the&amp;nbsp;notebook.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Collaborative&amp;nbsp;project&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Consider extracting some mature code into python module that in imported into notebook and take some effort to clean-up and test the code. Take advantage of using modern IDEs such as&amp;nbsp;PyCharm.&lt;/p&gt;
&lt;p&gt;Using version control is also highly recommended even if tracing differences in json files (format of Jupyter notebooks) is less convenient when compared to plain source code you will have record of previous versions of&amp;nbsp;notebook.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Individual work but final notebook shares as&amp;nbsp;result&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Take care of reproducibility - either for yourself if the updates to the outcome document will be needed or for someone else that would like to reproduce your results e.g. when following tutorial you&amp;nbsp;created.&lt;/p&gt;
&lt;p&gt;For more complex project setup take look at &lt;a href="https://drivendata.github.io/cookiecutter-data-science"&gt;Cookiecutter Data Science&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Additional&amp;nbsp;Tips&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Notebook&amp;nbsp;metadata&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It is useful to include some metadata to the notebook. Here is example borrowed from &lt;a href="http://pbpython.com/notebook-process.html"&gt;pbpython&lt;/a&gt;:
For that we will need to import &lt;code&gt;Path&lt;/code&gt; from &lt;code&gt;pathlib&lt;/code&gt; and &lt;code&gt;datetime&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pathlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Exemplary meta information on time (might indicate last modification) and files used might looks like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;today&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;sales_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cwd&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;data&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;raw&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Sales-History.csv&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;pipeline_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cwd&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;data&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;raw&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;pipeline_data.xlsx&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;summary_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cwd&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;data&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;processed&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;summary_&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;%b-%d-%Y&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.pkl&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Use cookiecutter to standardize your&amp;nbsp;projects&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To bootstrap the software projects from template one can use cookiecutter. You can create your template by following short instructions &lt;a href=""&gt;&lt;/a&gt;. Here is exception from the&amp;nbsp;documentation:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Cookiecutter takes a source directory tree and copies it into your new project. It replaces all the names that it finds surrounded by templating tags &lt;code&gt;{{&lt;/code&gt; and &lt;code&gt;}}&lt;/code&gt; with names that it finds in the file &lt;code&gt;cookiecutter.json&lt;/code&gt;. That’s basically&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;The replaced names can be file names, directory names, and strings inside&amp;nbsp;files.&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="Howto"></category><category term="jupyter"></category><category term="python"></category><category term="notebook"></category><category term="howto"></category><category term="machine learning"></category></entry></feed>